///////////////////////////////////////////////////////////////////////////////////////
//                     gesedels · unit tests and helper functions                    //
///////////////////////////////////////////////////////////////////////////////////////

package main

import (
	"io"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/stretchr/testify/assert"
)

///////////////////////////////////////////////////////////////////////////////////////
//                        part zero · testing helper functions                       //
///////////////////////////////////////////////////////////////////////////////////////

// response returns the status code and response body of a ResponseRecorder.
func response(w *httptest.ResponseRecorder) (int, string) {
	rslt := w.Result()
	body, _ := io.ReadAll(rslt.Body)
	return rslt.StatusCode, string(body)
}

///////////////////////////////////////////////////////////////////////////////////////
//                          part one · constants and globals                         //
///////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////
//                      part two · string sanitisation functions                     //
///////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////
//                      part three · database handling functions                     //
///////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////
//                        part four · http response functions                        //
///////////////////////////////////////////////////////////////////////////////////////

func TestWriteHTTP(t *testing.T) {
	// setup
	w := httptest.NewRecorder()

	// success
	WriteHTTP(w, http.StatusOK, "%s", "test")
	code, body := response(w)
	assert.Equal(t, http.StatusOK, code)
	assert.Equal(t, "test\n", body)
}

func TestWriteError(t *testing.T) {
	// setup
	w := httptest.NewRecorder()

	// success
	WriteError(w, http.StatusInternalServerError, "%s", "test")
	code, body := response(w)
	assert.Equal(t, http.StatusInternalServerError, code)
	assert.Equal(t, "server error 500: test\n", body)
}

func TestWriteFailure(t *testing.T) {
	// setup
	w := httptest.NewRecorder()

	// success
	WriteFailure(w, http.StatusBadRequest, "%s", "test")
	code, body := response(w)
	assert.Equal(t, http.StatusBadRequest, code)
	assert.Equal(t, "client error 400: test\n", body)
}

///////////////////////////////////////////////////////////////////////////////////////
//                        part five · server type and methods                        //
///////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////
//                         part six · server endpoint methods                        //
///////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////
//                        part seven · main runtime functions                        //
///////////////////////////////////////////////////////////////////////////////////////
